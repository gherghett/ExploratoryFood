@using Food.Core.Model;

@{
    ViewData["Title"] = "Order Page";
    RestaurantDetailsViewModel restaurant = (RestaurantDetailsViewModel)ViewData["Restaurant"]!;
    MenuItemViewModel menuItem = (MenuItemViewModel)ViewData["MenuItem"]!;
    decimal serviceFeePercentage = 0.05M; // 5% service fee
}

<div class="container mt-4">

    @await Html.PartialAsync("_RestaurantDetails", restaurant);

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <img src="@menuItem.ImageUrl" class="card-img-top" alt="@menuItem.Name">
                <div class="card-body text-center">
                    <h5 class="card-title">@menuItem.Name</h5>
                    <p class="card-text">Price per item: $@menuItem.Price</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row justify-content-center mt-4">
        <div class="col-md-6">
            <h4>Order Now</h4>
            <form method="post" action="/Order/New">
                <input type="hidden" name="MenuItemId" value="@menuItem.Id" />
                <input type="hidden" name="RestaurantId" value="@restaurant.Id" />


                <div class="mb-3">
                    <label for="Name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="Name" name="Name" required>
                </div>
                <div class="mb-3">
                    <label for="Address" class="form-label">Address</label>
                    <input type="text" class="form-control" id="Address" name="Address" required>
                </div>
                <div class="mb-3">
                    <label for="PhoneNumber" class="form-label">Phone Number</label>
                    <input type="tel" class="form-control" id="PhoneNumber" name="PhoneNumber" required>
                </div>

                <div class="mb-3">
                    <label for="Quantity" class="form-label">Quantity</label>
                    <input type="number" class="form-control" id="Quantity" name="Quantity" value="1" min="1" required>
                </div>

                <!-- Display the calculated price -->
                <div class="mb-3">
                    <strong>Total Price: $<span id="TotalPrice">@(menuItem.Price + (menuItem.Price * serviceFeePercentage))</span></strong>
                </div>

                <!-- Hidden fields for ExpectedPricing with correct binding format -->
                <input type="hidden" id="HiddenUnitPrice" name="ExpectedPricing.unit" value="@menuItem.Price">
                <input type="hidden" id="HiddenSum" name="ExpectedPricing.sum" value="@menuItem.Price">
                <input type="hidden" id="HiddenServiceFee" name="ExpectedPricing.serviceFee" value="@(menuItem.Price * serviceFeePercentage)">
                <input type="hidden" id="HiddenTotal" name="ExpectedPricing.total" value="@(menuItem.Price + (menuItem.Price * serviceFeePercentage))">


                <div class="mb-3">
                    <label for="ExtraInstructions" class="form-label">Extra Instructions</label>
                    <textarea class="form-control" id="ExtraInstructions" name="ExtraInstructions" rows="2"></textarea>
                </div>
                <div class="mb-3">
                    <label for="DeliveryInstructions" class="form-label">Delivery Instructions</label>
                    <textarea class="form-control" id="DeliveryInstructions" name="DeliveryInstructions" rows="2"></textarea>
                </div>

                <button type="submit" class="btn btn-primary w-100">Place Order</button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const quantityInput = document.getElementById("Quantity");
        const totalPriceDisplay = document.getElementById("TotalPrice");

        // Hidden fields for pricing
        const hiddenUnitPrice = document.getElementById("HiddenUnitPrice");
        const hiddenSum = document.getElementById("HiddenSum");
        const hiddenServiceFee = document.getElementById("HiddenServiceFee");
        const hiddenTotal = document.getElementById("HiddenTotal");

        const menuItemId = parseInt(document.querySelector('input[name="MenuItemId"]').value, 10);
        const serviceFeePercentage = 0.05; // 5% service fee

        function localCalculation() {
            const unitPrice = parseFloat(hiddenUnitPrice.value);
            let quantity = parseInt(quantityInput.value) || 1;

            let sum = unitPrice * quantity;
            let serviceFee = sum * serviceFeePercentage;
            let total = sum + serviceFee;

            // Update displayed price
            totalPriceDisplay.textContent = total.toFixed(2);

            // Update hidden fields for form submission
            hiddenSum.value = formatSwedishNumber ? formatSwedishNumber(sum) : sum.toFixed(2);
            hiddenServiceFee.value = formatSwedishNumber ? formatSwedishNumber(serviceFee) : serviceFee.toFixed(2);
            hiddenTotal.value = formatSwedishNumber ? formatSwedishNumber(total) : total.toFixed(2);
        }

        async function updatePrice() {
            let quantity = parseInt(quantityInput.value) || 1;

            // Optimistically update UI with local calculation while waiting for API response
            localCalculation();

            try {
                let response = await fetch("http://localhost:5212/calculate-price", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ menuItemId: menuItemId, quantity: quantity }),
                });

                if (!response.ok) {
                    throw new Error("Failed to calculate price");
                }

                let data = await response.json();

                // Update displayed price
                totalPriceDisplay.textContent = data.pricing.total.toFixed(2);

                // Update hidden fields for form submission
                hiddenUnitPrice.value = formatSwedishNumber(data.pricing.unit);
                hiddenSum.value = formatSwedishNumber(data.pricing.sum);
                hiddenServiceFee.value = formatSwedishNumber(data.pricing.serviceFee);
                hiddenTotal.value = formatSwedishNumber(data.pricing.total);

            } catch (error) {
                console.error("Error fetching price:", error);
            }
        }

        // Run initial calculation on page load
        localCalculation();

        // Trigger API call when quantity changes
        quantityInput.addEventListener("input", updatePrice);
    });
</script>



